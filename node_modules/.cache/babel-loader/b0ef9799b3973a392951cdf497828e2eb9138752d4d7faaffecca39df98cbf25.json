{"ast":null,"code":"// src/components/QuizPage.js\n// import React, { useState } from 'react';\n// import quizData from '../components/quizData';\n// import imagetop from './images/top.png'\n// import imagebottom from './images/bottom.png'\n\n// function QuizPage() {\n//     const [selectedOptions, setSelectedOptions] = useState({});\n//     const [showScore, setShowScore] = useState(false);\n//     const [score, setScore] = useState(0);\n\n//     const handleOptionClick = (questionIndex, option) => {\n//         setSelectedOptions({ ...selectedOptions, [questionIndex]: option });\n//     };\n\n//     const handleSubmit = () => {\n//         let newScore = 0;\n//         quizData.forEach((question, index) => {\n//             if (question.answer === selectedOptions[index]) {\n//                 newScore += 1;\n//             }\n//         });\n//         setScore(newScore);\n//         setShowScore(true);\n//     };\n\n//     const handlePlayAgain = () => {\n//         setSelectedOptions({});\n//         setShowScore(false);\n//         setScore(0);\n//     };\n\n//     return (\n//         <div className=\"all\">\n//             <img src={imagetop} alt='' className='top'/>\n//             <div className='quiz-page container'>  \n//             {showScore ? (\n//                 <div className=\"score-section\">\n//                     <p>You have scored {score} out of {quizData.length}</p>\n//                     <button onClick={handlePlayAgain}>Play Again</button>\n//                 </div>\n//             ) : (\n//                 <div className=\"question-section\">\n//                     {quizData.map((question, index) => (\n//                         <div key={index} className=\"question-block\">\n//                             <h2 className='qns'>{question.question}</h2>\n//                             <div className=\"options\">\n//                                 {question.options.map((option, optionIndex) => (\n//                                     <button\n//                                         key={optionIndex}\n//                                         onClick={() => handleOptionClick(index, option)}\n//                                         id=\"btn\"\n//                                         className={selectedOptions[index] === option ? 'selected' : ''}\n//                                     >\n//                                         {option}\n//                                     </button>\n//                                 ))}\n//                             </div>\n//                         </div>\n//                     ))}\n//                     <button onClick={handleSubmit} className='check'>Check answers</button>\n//                 </div>\n//             )}\n//         </div>\n//         <img src={imagebottom } alt='' className='bottom'/>\n//         </div>\n//     );\n// }\n\n// export default QuizPage;","map":{"version":3,"names":[],"sources":["/Users/uncommonstudent/Desktop/quiz/src/components/QuizPage.js"],"sourcesContent":["// src/components/QuizPage.js\n// import React, { useState } from 'react';\n// import quizData from '../components/quizData';\n// import imagetop from './images/top.png'\n// import imagebottom from './images/bottom.png'\n\n\n// function QuizPage() {\n//     const [selectedOptions, setSelectedOptions] = useState({});\n//     const [showScore, setShowScore] = useState(false);\n//     const [score, setScore] = useState(0);\n\n//     const handleOptionClick = (questionIndex, option) => {\n//         setSelectedOptions({ ...selectedOptions, [questionIndex]: option });\n//     };\n\n//     const handleSubmit = () => {\n//         let newScore = 0;\n//         quizData.forEach((question, index) => {\n//             if (question.answer === selectedOptions[index]) {\n//                 newScore += 1;\n//             }\n//         });\n//         setScore(newScore);\n//         setShowScore(true);\n//     };\n\n//     const handlePlayAgain = () => {\n//         setSelectedOptions({});\n//         setShowScore(false);\n//         setScore(0);\n//     };\n\n//     return (\n//         <div className=\"all\">\n//             <img src={imagetop} alt='' className='top'/>\n//             <div className='quiz-page container'>  \n//             {showScore ? (\n//                 <div className=\"score-section\">\n//                     <p>You have scored {score} out of {quizData.length}</p>\n//                     <button onClick={handlePlayAgain}>Play Again</button>\n//                 </div>\n//             ) : (\n//                 <div className=\"question-section\">\n//                     {quizData.map((question, index) => (\n//                         <div key={index} className=\"question-block\">\n//                             <h2 className='qns'>{question.question}</h2>\n//                             <div className=\"options\">\n//                                 {question.options.map((option, optionIndex) => (\n//                                     <button\n//                                         key={optionIndex}\n//                                         onClick={() => handleOptionClick(index, option)}\n//                                         id=\"btn\"\n//                                         className={selectedOptions[index] === option ? 'selected' : ''}\n//                                     >\n//                                         {option}\n//                                     </button>\n//                                 ))}\n//                             </div>\n//                         </div>\n//                     ))}\n//                     <button onClick={handleSubmit} className='check'>Check answers</button>\n//                 </div>\n//             )}\n//         </div>\n//         <img src={imagebottom } alt='' className='bottom'/>\n//         </div>\n//     );\n// }\n\n// export default QuizPage;\n\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}