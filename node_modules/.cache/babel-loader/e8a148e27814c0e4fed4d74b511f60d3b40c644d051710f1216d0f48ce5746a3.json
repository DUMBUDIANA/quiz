{"ast":null,"code":"var _jsxFileName = \"/Users/uncommonstudent/Desktop/quiz/src/components/QuizPage.js\",\n  _s = $RefreshSig$();\n// src/components/QuizPage.js\n// import React, { useState } from 'react';\n// import quizData from '../components/quizData';\n// import imagetop from './images/top.png'\n// import imagebottom from './images/bottom.png'\n\n// function QuizPage() {\n//     const [selectedOptions, setSelectedOptions] = useState({});\n//     const [showScore, setShowScore] = useState(false);\n//     const [score, setScore] = useState(0);\n\n//     const handleOptionClick = (questionIndex, option) => {\n//         setSelectedOptions({ ...selectedOptions, [questionIndex]: option });\n//     };\n\n//     const handleSubmit = () => {\n//         let newScore = 0;\n//         quizData.forEach((question, index) => {\n//             if (question.answer === selectedOptions[index]) {\n//                 newScore += 1;\n//             }\n//         });\n//         setScore(newScore);\n//         setShowScore(true);\n//     };\n\n//     const handlePlayAgain = () => {\n//         setSelectedOptions({});\n//         setShowScore(false);\n//         setScore(0);\n//     };\n\n//     return (\n//         <div className=\"all\">\n//             <img src={imagetop} alt='' className='top'/>\n//             <div className='quiz-page container'>  \n//             {showScore ? (\n//                 <div className=\"score-section\">\n//                     <p>You have scored {score} out of {quizData.length}</p>\n//                     <button onClick={handlePlayAgain}>Play Again</button>\n//                 </div>\n//             ) : (\n//                 <div className=\"question-section\">\n//                     {quizData.map((question, index) => (\n//                         <div key={index} className=\"question-block\">\n//                             <h2 className='qns'>{question.question}</h2>\n//                             <div className=\"options\">\n//                                 {question.options.map((option, optionIndex) => (\n//                                     <button\n//                                         key={optionIndex}\n//                                         onClick={() => handleOptionClick(index, option)}\n//                                         id=\"btn\"\n//                                         className={selectedOptions[index] === option ? 'selected' : ''}\n//                                     >\n//                                         {option}\n//                                     </button>\n//                                 ))}\n//                             </div>\n//                         </div>\n//                     ))}\n//                     <button onClick={handleSubmit} className='check'>Check answers</button>\n//                 </div>\n//             )}\n//         </div>\n//         <img src={imagebottom } alt='' className='bottom'/>\n//         </div>\n//     );\n// }\n\n// export default QuizPage;\n\nimport React, { useState } from 'react';\nimport quizData from './quizData';\nimport imagetop from './images/top.png';\nimport imagebottom from './images/bottom.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction QuizPage() {\n  _s();\n  const [selectedOptions, setSelectedOptions] = useState({});\n  const [showScore, setShowScore] = useState(false);\n  const [score, setScore] = useState(0);\n  const handleOptionClick = (questionIndex, option) => {\n    setSelectedOptions({\n      ...selectedOptions,\n      [questionIndex]: option\n    });\n  };\n  const handleSubmit = () => {\n    let newScore = 0;\n    quizData.forEach((question, index) => {\n      if (question.answer === selectedOptions[index]) {\n        newScore += 1;\n      }\n    });\n    setScore(newScore);\n    setShowScore(true);\n  };\n  const handlePlayAgain = () => {\n    setSelectedOptions({});\n    setShowScore(false);\n    setScore(0);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"all\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: imagetop,\n      alt: \"\",\n      className: \"top\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quiz-page container\",\n      children: showScore ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"score-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"You have scored \", score, \" out of \", quizData.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"review-section\",\n          children: quizData.map((question, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"question-block\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"qns\",\n              children: question.question\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"options\",\n              children: question.options.map((option, optionIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: `option ${option === question.answer ? 'correct' : selectedOptions[index] === option ? 'selected' : ''}`,\n                children: [option, option === question.answer && ' (Correct Answer)', selectedOptions[index] === option && option !== question.answer && ' (Your Answer)']\n              }, optionIndex, true, {\n                fileName: _jsxFileName,\n                lineNumber: 117,\n                columnNumber: 41\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 33\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"You have scored \", score, \" out of \", quizData.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handlePlayAgain,\n          children: \"Play Again\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-section\",\n        children: [quizData.map((question, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"question-block\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"qns\",\n            children: question.question\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"option-text\",\n            children: question.options.map((option, optionIndex) => /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleOptionClick(index, option),\n              id: \"btn\",\n              className: `option ${selectedOptions[index] === option ? 'selected' : ''}`,\n              children: option\n            }, optionIndex, false, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 29\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 25\n        }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSubmit,\n          className: \"check\",\n          children: \"Check answers\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: imagebottom,\n      alt: \"\",\n      className: \"bottom\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 9\n  }, this);\n}\n_s(QuizPage, \"GwzqrIXcY9J40m1z7js5Zy7J4hU=\");\n_c = QuizPage;\nexport default QuizPage;\nvar _c;\n$RefreshReg$(_c, \"QuizPage\");","map":{"version":3,"names":["React","useState","quizData","imagetop","imagebottom","jsxDEV","_jsxDEV","QuizPage","_s","selectedOptions","setSelectedOptions","showScore","setShowScore","score","setScore","handleOptionClick","questionIndex","option","handleSubmit","newScore","forEach","question","index","answer","handlePlayAgain","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","length","map","options","optionIndex","onClick","id","_c","$RefreshReg$"],"sources":["/Users/uncommonstudent/Desktop/quiz/src/components/QuizPage.js"],"sourcesContent":["// src/components/QuizPage.js\n// import React, { useState } from 'react';\n// import quizData from '../components/quizData';\n// import imagetop from './images/top.png'\n// import imagebottom from './images/bottom.png'\n\n\n// function QuizPage() {\n//     const [selectedOptions, setSelectedOptions] = useState({});\n//     const [showScore, setShowScore] = useState(false);\n//     const [score, setScore] = useState(0);\n\n//     const handleOptionClick = (questionIndex, option) => {\n//         setSelectedOptions({ ...selectedOptions, [questionIndex]: option });\n//     };\n\n//     const handleSubmit = () => {\n//         let newScore = 0;\n//         quizData.forEach((question, index) => {\n//             if (question.answer === selectedOptions[index]) {\n//                 newScore += 1;\n//             }\n//         });\n//         setScore(newScore);\n//         setShowScore(true);\n//     };\n\n//     const handlePlayAgain = () => {\n//         setSelectedOptions({});\n//         setShowScore(false);\n//         setScore(0);\n//     };\n\n//     return (\n//         <div className=\"all\">\n//             <img src={imagetop} alt='' className='top'/>\n//             <div className='quiz-page container'>  \n//             {showScore ? (\n//                 <div className=\"score-section\">\n//                     <p>You have scored {score} out of {quizData.length}</p>\n//                     <button onClick={handlePlayAgain}>Play Again</button>\n//                 </div>\n//             ) : (\n//                 <div className=\"question-section\">\n//                     {quizData.map((question, index) => (\n//                         <div key={index} className=\"question-block\">\n//                             <h2 className='qns'>{question.question}</h2>\n//                             <div className=\"options\">\n//                                 {question.options.map((option, optionIndex) => (\n//                                     <button\n//                                         key={optionIndex}\n//                                         onClick={() => handleOptionClick(index, option)}\n//                                         id=\"btn\"\n//                                         className={selectedOptions[index] === option ? 'selected' : ''}\n//                                     >\n//                                         {option}\n//                                     </button>\n//                                 ))}\n//                             </div>\n//                         </div>\n//                     ))}\n//                     <button onClick={handleSubmit} className='check'>Check answers</button>\n//                 </div>\n//             )}\n//         </div>\n//         <img src={imagebottom } alt='' className='bottom'/>\n//         </div>\n//     );\n// }\n\n// export default QuizPage;\n\nimport React, { useState } from 'react';\nimport quizData from './quizData';\nimport imagetop from './images/top.png';\nimport imagebottom from './images/bottom.png';\n\nfunction QuizPage() {\n    const [selectedOptions, setSelectedOptions] = useState({});\n    const [showScore, setShowScore] = useState(false);\n    const [score, setScore] = useState(0);\n\n    const handleOptionClick = (questionIndex, option) => {\n        setSelectedOptions({ ...selectedOptions, [questionIndex]: option });\n    };\n\n    const handleSubmit = () => {\n        let newScore = 0;\n        quizData.forEach((question, index) => {\n            if (question.answer === selectedOptions[index]) {\n                newScore += 1;\n            }\n        });\n        setScore(newScore);\n        setShowScore(true);\n    };\n\n    const handlePlayAgain = () => {\n        setSelectedOptions({});\n        setShowScore(false);\n        setScore(0);\n    };\n\n    return (\n        <div className=\"all\">\n            <img src={imagetop} alt='' className='top'/>\n            <div className='quiz-page container'>  \n            {showScore ? (\n                <div className=\"score-section\">\n                    <p>You have scored {score} out of {quizData.length}</p>\n                    <div className=\"review-section\">\n                        {quizData.map((question, index) => (\n                            <div key={index} className=\"question-block\">\n                                <h2 className='qns'>{question.question}</h2>\n                                <div className=\"options\">\n                                    {question.options.map((option, optionIndex) => (\n                                        <div\n                                            key={optionIndex}\n                                            className={`option ${option === question.answer ? 'correct' : selectedOptions[index] === option ? 'selected' : ''}`}\n                                        >\n                                            {option}\n                                            {option === question.answer && ' (Correct Answer)'}\n                                            {selectedOptions[index] === option && option !== question.answer && ' (Your Answer)'}\n                                        </div>\n                                    ))}\n                                </div>\n                            </div>\n                        ))}\n                    </div>\n                    <p></p>\n                    <p>You have scored {score} out of {quizData.length}</p>\n                    <button onClick={handlePlayAgain}>Play Again</button>\n                </div>\n            ) : (\n                <div className=\"question-section\">\n                    {quizData.map((question, index) => (\n                        <div key={index} className=\"question-block\">\n                            <h2 className='qns'>{question.question}</h2>\n                            <div className=\"option-text\">\n                                {question.options.map((option, optionIndex) => (\n                                    <button\n                                        key={optionIndex}\n                                        onClick={() => handleOptionClick(index, option)}\n                                        id=\"btn\"\n                                        className={`option ${selectedOptions[index] === option ? 'selected' : ''}`}\n                                    >\n                                        {option}\n                                    </button>\n                                ))}\n                            </div>\n                        </div>\n                    ))}\n                    <button onClick={handleSubmit} className='check'>Check answers</button>\n                </div>\n            )}\n        </div>\n        <img src={imagebottom } alt='' className='bottom'/>\n        </div>\n    );\n}\n\nexport default QuizPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}